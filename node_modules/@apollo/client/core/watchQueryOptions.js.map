{"version":3,"file":"watchQueryOptions.js","sourceRoot":"","sources":["../../src/core/watchQueryOptions.ts"],"names":[],"mappings":"","sourcesContent":["import type { Unmasked } from \"@apollo/client/masking\";\nimport type { DeepPartial } from \"@apollo/client/utilities\";\n\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\nimport type { OperationVariables } from \"./types.js\";\n\n/**\n * fetchPolicy determines where the client may return a result from. The options are:\n *\n * - cache-first (default): return result from cache. Only fetch from network if cached result is not available.\n * - cache-and-network: return result from cache first (if it exists), then return network result once it's available.\n * - cache-only: return result from cache if available, fail otherwise.\n * - no-cache: return result from network, fail if network call doesn't succeed, don't save to cache\n * - network-only: return result from network, fail if network call doesn't succeed, save to cache\n * - standby: only for queries that aren't actively watched, but should be available for refetch and updateQueries.\n */\nexport type FetchPolicy =\n  | \"cache-first\"\n  | \"network-only\"\n  | \"cache-only\"\n  | \"no-cache\";\n\nexport type WatchQueryFetchPolicy =\n  | FetchPolicy\n  | \"cache-and-network\"\n  | \"standby\";\n\nexport type MutationFetchPolicy = Extract<\n  FetchPolicy,\n  | \"network-only\" // default behavior (mutation results written to cache)\n  | \"no-cache\" // alternate behavior (results not written to cache)\n>;\n\nexport type RefetchWritePolicy = \"merge\" | \"overwrite\";\n\n/**\n * errorPolicy determines the level of events for errors in the execution result. The options are:\n *\n * - none (default): any errors from the request are treated like runtime errors and the observable is stopped\n * - ignore: errors from the request do not stop the observable, but also don't call `next`\n * - all: errors are treated like data and will notify observables\n */\nexport type ErrorPolicy = \"none\" | \"ignore\" | \"all\";\n\nexport interface NextFetchPolicyContext<\n  TData,\n  TVariables extends OperationVariables,\n> {\n  reason: \"after-fetch\" | \"variables-changed\";\n  observable: ObservableQuery<TData, TVariables>;\n  options: ApolloClient.WatchQueryOptions<TData, TVariables>;\n  initialFetchPolicy: WatchQueryFetchPolicy;\n}\n\nexport type UpdateQueryOptions<TData, TVariables extends OperationVariables> = {\n  variables?: TVariables;\n} & (\n  | {\n      /**\n       * Indicate if the previous query result has been found fully in the cache.\n       */\n      complete: true;\n      previousData: Unmasked<TData>;\n    }\n  | {\n      /**\n       * Indicate if the previous query result has not been found fully in the cache.\n       * Might have partial or missing data.\n       */\n      complete: false;\n      previousData: DeepPartial<Unmasked<TData>> | undefined;\n    }\n);\n\nexport interface UpdateQueryMapFn<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  (\n    /**\n     * @deprecated This value is not type-safe and may contain partial data. This\n     * argument will be removed in Apollo Client v5. Use `options.previousData`\n     * instead for a more type-safe value.\n     */\n    unsafePreviousData: DeepPartial<Unmasked<TData>>,\n    options: UpdateQueryOptions<TData, TVariables>\n  ): Unmasked<TData> | void;\n}\n\nexport type SubscribeToMoreUpdateQueryFn<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n  TSubscriptionData = TData,\n> = {\n  (\n    /**\n     * @deprecated This value is not type-safe and may contain partial data. This\n     * argument will be removed in Apollo Client v5. Use `options.previousData`\n     * instead for a more type-safe value.\n     */\n    unsafePreviousData: DeepPartial<Unmasked<TData>>,\n    options: UpdateQueryOptions<TData, TVariables> & {\n      subscriptionData: { data: Unmasked<TSubscriptionData> };\n    }\n  ): Unmasked<TData> | void;\n};\n\nexport interface SubscribeToMoreFunction<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  <\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: ObservableQuery.SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData,\n      TVariables\n    >\n  ): () => void;\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/core/index.ts"],"names":[],"mappings":"AAAA,UAAU;AAgBV,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAYvD,OAAO,EAAE,uBAAuB,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAyB5E,OAAO,EACL,qBAAqB,EACrB,sBAAsB,EACtB,SAAS,EACT,eAAe,EACf,WAAW,EACX,gBAAgB,EAChB,mBAAmB,GACpB,MAAM,uBAAuB,CAAC;AAiC/B,OAAO,EACL,WAAW,EACX,uBAAuB,EACvB,aAAa,EACb,OAAO,EACP,iBAAiB,GAClB,MAAM,sBAAsB,CAAC;AAE9B,UAAU;AAEV,OAAO,EACL,UAAU,EACV,MAAM,EACN,KAAK,EACL,OAAO,EACP,IAAI,EACJ,KAAK,GACN,MAAM,qBAAqB,CAAC;AAU7B,OAAO,EACL,YAAY,EACZ,cAAc,EACd,uBAAuB,EACvB,cAAc,EACd,kBAAkB,EAClB,QAAQ,EACR,yBAAyB,EACzB,gBAAgB,EAChB,wBAAwB;AACxB,uEAAuE;AACvE,gCAAgC,EAChC,SAAS,GACV,MAAM,0BAA0B,CAAC;AAgBlC,OAAO,EACL,iBAAiB,EACjB,WAAW,EACX,UAAU,GACX,MAAM,0BAA0B,CAAC;AAElC,gBAAgB;AAEhB,yEAAyE;AACzE,yFAAyF;AACzF,6DAA6D;AAC7D,OAAO,EAAE,YAAY,IAAI,eAAe,EAAE,MAAM,oCAAoC,CAAC;AAErF,0DAA0D;AAC1D,qEAAqE;AACrE,sEAAsE;AACtE,yEAAyE;AACzE,yCAAyC;AACzC,wEAAwE;AACxE,6EAA6E;AAC7E,8EAA8E;AAC9E,sEAAsE;AACtE,qEAAqE;AACrE,4EAA4E;AAC5E,6BAA6B;AAC7B,OAAO,EACL,oCAAoC,EACpC,uBAAuB,EACvB,mCAAmC,EACnC,GAAG,EACH,WAAW,GACZ,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC","sourcesContent":["/* Core */\n\nexport type {\n  ApolloClientOptions,\n  ApolloQueryResult,\n  DefaultOptions,\n  DevtoolsOptions,\n  MutateResult,\n  MutationOptions,\n  QueryOptions,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  SubscribeToMoreOptions,\n  SubscriptionOptions,\n  WatchQueryOptions,\n} from \"./deprecated.js\";\nexport { ApolloClient } from \"./ApolloClient.js\";\nexport { ObservableQuery } from \"./ObservableQuery.js\";\nexport type {\n  ErrorPolicy,\n  FetchPolicy,\n  MutationFetchPolicy,\n  RefetchWritePolicy,\n  SubscribeToMoreFunction,\n  SubscribeToMoreUpdateQueryFn,\n  UpdateQueryMapFn,\n  UpdateQueryOptions,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\nexport { isNetworkRequestSettled, NetworkStatus } from \"./networkStatus.js\";\nexport type {\n  DataState,\n  DataValue,\n  DefaultContext,\n  ErrorLike,\n  GetDataState,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesMap,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueryDescriptor,\n  MutationQueryReducer,\n  MutationQueryReducersMap,\n  MutationUpdaterFunction,\n  NormalizedExecutionResult,\n  OnQueryUpdated,\n  OperationVariables,\n  RefetchQueriesInclude,\n  RefetchQueriesPromiseResults,\n  RefetchQueryDescriptor,\n  SubscriptionObservable,\n  TypedDocumentNode,\n  TypeOverrides,\n} from \"./types.js\";\nexport {\n  CombinedGraphQLErrors,\n  CombinedProtocolErrors,\n  LinkError,\n  LocalStateError,\n  ServerError,\n  ServerParseError,\n  UnconventionalError,\n} from \"@apollo/client/errors\";\n/* Cache */\n\nexport type {\n  ApolloReducerConfig,\n  Cache,\n  DiffQueryAgainstStoreOptions,\n  FieldFunctionOptions,\n  FieldMergeFunction,\n  FieldPolicy,\n  FieldReadFunction,\n  IdGetter,\n  IdGetterObj,\n  InMemoryCacheConfig,\n  MergeInfo,\n  MergeTree,\n  NormalizedCache,\n  NormalizedCacheObject,\n  OptimisticStoreItem,\n  PossibleTypesMap,\n  ReactiveVar,\n  ReadMergeModifyContext,\n  ReadQueryOptions,\n  StoreValue,\n  // All the exports (types) from ../cache, minus cacheSlot,\n  // which we want to keep semi-private.\n  Transaction,\n  TypePolicies,\n  TypePolicy,\n  WatchFragmentOptions,\n  WatchFragmentResult,\n} from \"@apollo/client/cache\";\n\nexport {\n  ApolloCache,\n  defaultDataIdFromObject,\n  InMemoryCache,\n  makeVar,\n  MissingFieldError,\n} from \"@apollo/client/cache\";\n\n/* Link */\n\nexport {\n  ApolloLink,\n  concat,\n  empty,\n  execute,\n  from,\n  split,\n} from \"@apollo/client/link\";\nexport type {\n  ApolloPayloadResult,\n  DocumentNode,\n  FetchResult,\n  GraphQLRequest,\n  Operation,\n  RequestHandler,\n} from \"@apollo/client/link\";\n\nexport {\n  checkFetcher,\n  createHttpLink,\n  createSignalIfSupported,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpLink,\n  parseAndCheckHttpResponse,\n  rewriteURIForGET,\n  selectHttpOptionsAndBody,\n  // TODO remove: needed by @apollo/client/link/batch-http but not public\n  selectHttpOptionsAndBodyInternal,\n  selectURI,\n} from \"@apollo/client/link/http\";\n\n/* Masking */\nexport type {\n  FragmentType,\n  MaybeMasked,\n  Unmasked,\n} from \"@apollo/client/masking\";\n\n/* Utilities */\n\nexport type {\n  DocumentTransformCacheKey,\n  Reference,\n  StoreObject,\n} from \"@apollo/client/utilities\";\nexport {\n  DocumentTransform,\n  isReference,\n  Observable,\n} from \"@apollo/client/utilities\";\n\n/* Supporting */\n\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// by passing \"log\", \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nexport { setVerbosity as setLogVerbosity } from \"@apollo/client/utilities/invariant\";\n\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport {\n  disableExperimentalFragmentVariables,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  gql,\n  resetCaches,\n} from \"graphql-tag\";\nexport { build, version } from \"../version.js\";\n\n// internal types\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type { NextFetchPolicyContext } from \"./watchQueryOptions.js\";\nexport declare namespace InternalTypes {\n  export type { NextFetchPolicyContext, QueryManager };\n}\n"]}
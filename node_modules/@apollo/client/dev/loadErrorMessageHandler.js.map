{"version":3,"file":"loadErrorMessageHandler.js","sourceRoot":"","sources":["../../src/dev/loadErrorMessageHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,2CAA2C,CAAC;AAKnE,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAE,yBAAyB,EAAE,MAAM,aAAa,CAAC;AAExD;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,GAAG,UAAwB;IACjE,sBAAsB,CAAC,OAAsC,CAAC,CAAC;IAE/D,KAAK,MAAM,KAAK,IAAI,UAAU,EAAE,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,OAAO,GAAG,CAAC,CAAC,OAAwB,EAAE,IAAe,EAAE,EAAE;IAC7D,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAChC,MAAM,UAAU,GAAG,MAAM,CAAC,yBAAyB,CAAE,CAAC,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO,IAAI,CAAC,UAAU,EAAE,OAAO;YAAE,OAAO;QAC7C,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;IAC/B,CAAC;IACD,OAAO,IAAI,CAAC,MAAM,CAChB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EACjD,MAAM,CAAC,OAAO,CAAC,CAChB,CAAC;AACJ,CAAC,CAAqC,CAAC","sourcesContent":["import { global } from \"@apollo/client/utilities/internal/globals\";\n\nimport type { ErrorCodes } from \"../invariantErrorCodes.js\";\n\nimport type { ErrorMessageHandler } from \"./setErrorMessageHandler.js\";\nimport { setErrorMessageHandler } from \"./setErrorMessageHandler.js\";\nimport { ApolloErrorMessageHandler } from \"./symbol.js\";\n\n/**\n * Injects Apollo Client's default error message handler into the application and\n * also loads the error codes that are passed in as arguments.\n */\nexport function loadErrorMessageHandler(...errorCodes: ErrorCodes[]) {\n  setErrorMessageHandler(handler as typeof handler & ErrorCodes);\n\n  for (const codes of errorCodes) {\n    Object.assign(handler, codes);\n  }\n\n  return handler;\n}\n\nconst handler = ((message: string | number, args: unknown[]) => {\n  if (typeof message === \"number\") {\n    const definition = global[ApolloErrorMessageHandler]![message];\n    if (!message || !definition?.message) return;\n    message = definition.message;\n  }\n  return args.reduce<string>(\n    (msg, arg) => msg.replace(/%[sdfo]/, String(arg)),\n    String(message)\n  );\n}) as ErrorMessageHandler & ErrorCodes;\n"]}
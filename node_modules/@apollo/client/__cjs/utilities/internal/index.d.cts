export type { DecoratedPromise } from "./types/DecoratedPromise.cjs";
export type { DeepOmit } from "./types/DeepOmit.cjs";
export type { FragmentMap } from "./types/FragmentMap.cjs";
export type { FragmentMapFunction } from "./types/FragmentMapFunction.cjs";
export type { FulfilledPromise } from "./types/FulfilledPromise.cjs";
export type { IsAny } from "./types/IsAny.cjs";
export type { NoInfer } from "./types/NoInfer.cjs";
export type { PendingPromise } from "./types/PendingPromise.cjs";
export type { Prettify } from "./types/Prettify.cjs";
export type { Primitive } from "./types/Primitive.cjs";
export type { RejectedPromise } from "./types/RejectedPromise.cjs";
export type { RemoveIndexSignature } from "./types/RemoveIndexSignature.cjs";
export type { VariablesOption } from "./types/VariablesOption.cjs";
export type { DocumentationTypes } from "./types/DocumentationTypes.cjs";
export { argumentsObjectFromField } from "./argumentsObjectFromField.cjs";
export { canUseDOM } from "./canUseDOM.cjs";
export { checkDocument } from "./checkDocument.cjs";
export { cloneDeep } from "./cloneDeep.cjs";
export { compact } from "./compact.cjs";
export { createFragmentMap } from "./createFragmentMap.cjs";
export { createFulfilledPromise } from "./createFulfilledPromise.cjs";
export { createRejectedPromise } from "./createRejectedPromise.cjs";
export { dealias } from "./dealias.cjs";
export { decoratePromise } from "./decoratePromise.cjs";
export { DeepMerger } from "./DeepMerger.cjs";
export { getDefaultValues } from "./getDefaultValues.cjs";
export { getFragmentFromSelection } from "./getFragmentFromSelection.cjs";
export { getFragmentQueryDocument } from "./getFragmentQueryDocument.cjs";
export { getFragmentDefinition } from "./getFragmentDefinition.cjs";
export { getFragmentDefinitions } from "./getFragmentDefinitions.cjs";
export { getGraphQLErrorsFromResult } from "./getGraphQLErrorsFromResult.cjs";
export { getMainDefinition } from "./getMainDefinition.cjs";
export { getOperationDefinition } from "./getOperationDefinition.cjs";
export { getOperationName } from "./getOperationName.cjs";
export { getQueryDefinition } from "./getQueryDefinition.cjs";
export { getStoreKeyName } from "./getStoreKeyName.cjs";
export { graphQLResultHasError } from "./graphQLResultHasError.cjs";
export { hasDirectives } from "./hasDirectives.cjs";
export { hasForcedResolvers } from "./hasForcedResolvers.cjs";
export { isArray } from "./isArray.cjs";
export { isDocumentNode } from "./isDocumentNode.cjs";
export { isField } from "./isField.cjs";
export { isNonEmptyArray } from "./isNonEmptyArray.cjs";
export { isNonNullObject } from "./isNonNullObject.cjs";
export { isPlainObject } from "./isPlainObject.cjs";
export { makeReference } from "./makeReference.cjs";
export { makeUniqueId } from "./makeUniqueId.cjs";
export { maybeDeepFreeze } from "./maybeDeepFreeze.cjs";
export { mergeDeep } from "./mergeDeep.cjs";
export { mergeDeepArray } from "./mergeDeepArray.cjs";
export { mergeOptions } from "./mergeOptions.cjs";
export { omitDeep } from "./omitDeep.cjs";
export { preventUnhandledRejection } from "./preventUnhandledRejection.cjs";
export { removeDirectivesFromDocument } from "./removeDirectivesFromDocument.cjs";
export { removeMaskedFragmentSpreads } from "./removeFragmentSpreads.cjs";
export { resultKeyNameFromField } from "./resultKeyNameFromField.cjs";
export { shouldInclude } from "./shouldInclude.cjs";
export { storeKeyNameFromField } from "./storeKeyNameFromField.cjs";
export { stringifyForDisplay } from "./stringifyForDisplay.cjs";
export { toQueryResult } from "./toQueryResult.cjs";
export { filterMap } from "./filterMap.cjs";
export { equalByQuery } from "./equalByQuery.cjs";
export { canonicalStringify } from "./canonicalStringify.cjs";
export { getApolloCacheMemoryInternals, getApolloClientMemoryInternals, getInMemoryCacheMemoryInternals, registerGlobalCache, } from "../internal/getMemoryInternals.cjs";
export { AutoCleanedStrongCache, AutoCleanedWeakCache } from "./caches.cjs";
export type { ApplyHKT } from "./types/ApplyHKT.cjs";
export type { ApplyHKTImplementationWithDefault } from "./types/ApplyHKTImplementationWithDefault.cjs";
//# sourceMappingURL=index.d.cts.map

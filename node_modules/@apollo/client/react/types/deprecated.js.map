{"version":3,"file":"deprecated.js","sourceRoot":"","sources":["../../../src/react/types/deprecated.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  ApolloCache,\n  DefaultContext,\n  OperationVariables,\n} from \"@apollo/client\";\n\nimport type { useBackgroundQuery } from \"../hooks/useBackgroundQuery.js\";\nimport type { useFragment } from \"../hooks/useFragment.js\";\nimport type { useLazyQuery } from \"../hooks/useLazyQuery.js\";\nimport type { useLoadableQuery } from \"../hooks/useLoadableQuery.js\";\nimport type { useMutation } from \"../hooks/useMutation.js\";\nimport type { useQuery } from \"../hooks/useQuery.js\";\nimport type { useQueryRefHandlers } from \"../hooks/useQueryRefHandlers.js\";\nimport type { useReadQuery } from \"../hooks/useReadQuery.js\";\nimport type { useSubscription } from \"../hooks/useSubscription.js\";\nimport type { useSuspenseFragment } from \"../hooks/useSuspenseFragment.js\";\nimport type { useSuspenseQuery } from \"../hooks/useSuspenseQuery.js\";\n\n/** @deprecated Use `useQuery.Options` instead */\nexport type QueryHookOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useQuery.Options<TData, TVariables>;\n\n/** @deprecated Use `useQuery.Result` instead */\nexport type QueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useQuery.Result<TData, TVariables>;\n\n/** @deprecated Use `useLazyQuery.Options` instead */\nexport type LazyQueryHookOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useLazyQuery.Options<TData, TVariables>;\n\n/** @deprecated Use `useLazyQuery.Result` instead */\nexport type LazyQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useLazyQuery.Result<TData, TVariables>;\n\n/** @deprecated Use `useLazyQuery.ResultTuple` instead */\nexport type LazyQueryResultTuple<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useLazyQuery.ResultTuple<TData, TVariables>;\n\n/** @deprecated Use `useLazyQuery.ExecOptions` instead */\nexport type LazyQueryHookExecOptions<\n  TVariables extends OperationVariables = OperationVariables,\n> = useLazyQuery.ExecOptions<TVariables>;\n\n/** @deprecated Use `useLazyQuery.ExecFunction` instead */\nexport type LazyQueryExecFunction<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useLazyQuery.ExecFunction<TData, TVariables>;\n\n/** @deprecated Use `useMutation.Options` instead */\nexport type MutationHookOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n  _TContext = DefaultContext,\n  TCache extends ApolloCache = ApolloCache,\n> = useMutation.Options<TData, TVariables, TCache>;\n\n/** @deprecated Use `useMutation.Result` instead */\nexport type MutationResult<TData = unknown> = useMutation.Result<TData>;\n\n/** @deprecated Use `useMutation.MutationFunctionOptions` instead */\nexport type MutationFunctionOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n  _TContext = DefaultContext,\n  TCache extends ApolloCache = ApolloCache,\n> = useMutation.MutationFunctionOptions<TData, TVariables, TCache>;\n\n/** @deprecated Use `useMutation.ResultTuple` instead */\nexport type MutationTuple<\n  TData,\n  TVariables extends OperationVariables,\n  _TContext = DefaultContext,\n  TCache extends ApolloCache = ApolloCache,\n> = useMutation.ResultTuple<TData, TVariables, TCache>;\n\n/** @deprecated Use `useSubscription.Result` instead */\nexport type SubscriptionResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useSubscription.Result<TData>;\n\n/** @deprecated Use `useSubscription.Options` instead */\nexport type SubscriptionHookOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useSubscription.Options<TData, TVariables>;\n\n/** @deprecated Use `useSubscription.OnDataOptions` instead */\nexport type OnDataOptions<TData = unknown> =\n  useSubscription.OnDataOptions<TData>;\n\n/** @deprecated Use `useSubscription.OnSubscriptionDataOptions` instead */\nexport type OnSubscriptionDataOptions<TData = unknown> =\n  useSubscription.OnSubscriptionDataOptions<TData>;\n\n/** @deprecated Use `useFragment.Options` instead */\nexport type UseFragmentOptions<\n  TData,\n  TVariables extends OperationVariables,\n> = useFragment.Options<TData, TVariables>;\n\n/** @deprecated Use `useFragment.Result` instead */\nexport type UseFragmentResult<TData> = useFragment.Result<TData>;\n\n/** @deprecated Use `useSuspenseQuery.Options` instead */\nexport type SuspenseQueryHookOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useSuspenseQuery.Options<TVariables>;\n\n/** @deprecated Use `useSuspenseQuery.Result` instead */\nexport type UseSuspenseQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useSuspenseQuery.Result<TData, TVariables>;\n\n/** @deprecated Use `useSuspenseQuery.FetchPolicy` instead */\nexport type SuspenseQueryHookFetchPolicy = useSuspenseQuery.FetchPolicy;\n\n/** @deprecated Use `useBackgroundQuery.Options` instead */\nexport type BackgroundQueryHookOptions<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useBackgroundQuery.Options<TVariables>;\n\n/** @deprecated Use `useBackgroundQuery.Result` instead */\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useBackgroundQuery.Result<TData, TVariables>;\n\n/** @deprecated Use `useBackgroundQuery.FetchPolicy` instead */\nexport type BackgroundQueryHookFetchPolicy = useBackgroundQuery.FetchPolicy;\n\n/** @deprecated Use `useSuspenseFragment.Options` instead */\nexport type UseSuspenseFragmentOptions<\n  TData,\n  TVariables extends OperationVariables,\n> = useSuspenseFragment.Options<TData, TVariables>;\n\n/** @deprecated Use `useSuspenseFragment.Result` instead */\nexport type UseSuspenseFragmentResult<TData> =\n  useSuspenseFragment.Result<TData>;\n\n/** @deprecated Use `useLoadableQuery.LoadQueryFunction` instead */\nexport type LoadQueryFunction<TVariables extends OperationVariables> =\n  useLoadableQuery.LoadQueryFunction<TVariables>;\n\n/** @deprecated Use `useLoadableQuery.FetchPolicy` instead */\nexport type LoadableQueryFetchPolicy = useLoadableQuery.FetchPolicy;\n\n/** @deprecated Use `useLoadableQuery.Options` instead */\nexport type LoadableQueryHookOptions = useLoadableQuery.Options;\n\n/** @deprecated Use `useLoadableQuery.Result` instead */\nexport type UseLoadableQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useLoadableQuery.Result<TData, TVariables>;\n\n/** @deprecated Use `useQueryRefHandlers.Result` instead */\nexport type UseQueryRefHandlersResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = useQueryRefHandlers.Result<TData, TVariables>;\n\n/** @deprecated Use `useReadQuery.Result` instead */\nexport type UseReadQueryResult<TData = unknown> = useReadQuery.Result<TData>;\n"]}
{"version":3,"file":"useSSRQuery.js","sourceRoot":"","sources":["../../../src/react/ssr/useSSRQuery.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AACjE,OAAO,EAAE,eAAe,EAAE,MAAM,mCAAmC,CAAC;AAIpE,MAAM,iBAAiB,GAAgC,eAAe,CAAC;IACrE,OAAO,EAAE,KAAK;IACd,IAAI,EAAE,KAAK,CAAQ;IACnB,SAAS,EAAE,OAAO;IAClB,KAAK,EAAE,KAAK,CAAC;IACb,aAAa,EAAE,aAAa,CAAC,KAAK;IAClC,OAAO,EAAE,IAAI;CACd,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,WAAW,GAAG,UAEzB,KAAmB,EACnB,UAAsC,EAAE;IAExC,SAAS,UAAU;QACjB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IACD,MAAM,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE/C,MAAM,UAAU,GAGZ;QACF,MAAM;QACN,OAAO,EAAE,UAAU;QACnB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE,UAAU;QAC3B,WAAW,EAAE,UAAU;QACvB,YAAY,EAAE,UAAU;QACxB,WAAW,EAAE,UAAU;QACvB,SAAS,EAAE,OAAO,EAAE,SAAS;QAC7B,YAAY,EAAE,SAAS;KACxB,CAAC;IAEF,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;QACtD,OAAO,uBAAuB,CAAC;YAC7B,GAAG,UAAU;YACb,GAAG,iBAAiB;SACrB,CAAC,CAAC;IACL,CAAC;IACD,IAAI,OAAO,CAAC,GAAG,KAAK,KAAK,EAAE,CAAC;QAC1B,OAAO,uBAAuB,CAAC;YAC7B,GAAG,UAAU;YACb,GAAG,QAAQ,CAAC,iBAAiB;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;IACnE,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;YAC7B,KAAK;YACL,GAAG,OAAO;YACV,WAAW,EACT,CACE,OAAO,CAAC,WAAW,KAAK,cAAc;gBACtC,OAAO,CAAC,WAAW,KAAK,mBAAmB,CAC5C,CAAC,CAAC;gBACD,aAAa;gBACf,CAAC,CAAC,OAAO,CAAC,WAAW;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;IACtE,CAAC;IACD,OAAO;QACL,UAAU;QACV,GAAG,UAAU,CAAC,gBAAgB,EAAE;QAChC,GAAG,UAAU;KACd,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,uBAAuB,CAC9B,KAAQ;IAER,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,EAAE;QACzC,GAAG;YACD,MAAM,IAAI,KAAK,CACb,qGAAqG,CACtG,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;IACH,OAAO,KAAY,CAAC;AACtB,CAAC","sourcesContent":["import type { DocumentNode } from \"graphql\";\n\nimport type { ObservableQuery } from \"@apollo/client\";\nimport { NetworkStatus } from \"@apollo/client\";\nimport { useApolloClient, useQuery } from \"@apollo/client/react\";\nimport { maybeDeepFreeze } from \"@apollo/client/utilities/internal\";\n\nimport type { PrerenderStaticInternalContext } from \"./prerenderStatic.js\";\n\nconst skipStandbyResult: ObservableQuery.Result<any> = maybeDeepFreeze({\n  loading: false,\n  data: void 0 as any,\n  dataState: \"empty\",\n  error: void 0,\n  networkStatus: NetworkStatus.ready,\n  partial: true,\n});\n\nexport const useSSRQuery = function (\n  this: PrerenderStaticInternalContext,\n  query: DocumentNode,\n  options: useQuery.Options<any, any> = {}\n): useQuery.Result<any, any> {\n  function notAllowed(): never {\n    throw new Error(\"This method cannot be called during SSR.\");\n  }\n  const client = useApolloClient(options.client);\n\n  const baseResult: Omit<\n    useQuery.Result,\n    \"observable\" | \"data\" | \"error\" | \"loading\" | \"networkStatus\" | \"dataState\"\n  > = {\n    client,\n    refetch: notAllowed,\n    fetchMore: notAllowed,\n    subscribeToMore: notAllowed,\n    updateQuery: notAllowed,\n    startPolling: notAllowed,\n    stopPolling: notAllowed,\n    variables: options?.variables,\n    previousData: undefined,\n  };\n\n  if (options.skip || options.fetchPolicy === \"standby\") {\n    return withoutObservableAccess({\n      ...baseResult,\n      ...skipStandbyResult,\n    });\n  }\n  if (options.ssr === false) {\n    return withoutObservableAccess({\n      ...baseResult,\n      ...useQuery.ssrDisabledResult,\n    });\n  }\n\n  let observable = this.getObservableQuery(query, options.variables);\n  if (!observable) {\n    observable = client.watchQuery({\n      query,\n      ...options,\n      fetchPolicy:\n        (\n          options.fetchPolicy === \"network-only\" ||\n          options.fetchPolicy === \"cache-and-network\"\n        ) ?\n          \"cache-first\"\n        : options.fetchPolicy,\n    });\n    this.onCreatedObservableQuery(observable, query, options.variables);\n  }\n  return {\n    observable,\n    ...observable.getCurrentResult(),\n    ...baseResult,\n  };\n};\n\nfunction withoutObservableAccess<T>(\n  value: T\n): T & { observable: ObservableQuery<any, any> } {\n  Object.defineProperty(value, \"observable\", {\n    get() {\n      throw new Error(\n        '\"observable\" property is not accessible on skipped hooks or hook calls with `ssr: false` during SSR'\n      );\n    },\n  });\n  return value as any;\n}\n"]}
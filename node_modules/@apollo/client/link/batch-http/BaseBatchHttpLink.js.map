{"version":3,"file":"BaseBatchHttpLink.js","sourceRoot":"","sources":["../../../src/link/batch-http/BaseBatchHttpLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, throwError } from \"rxjs\";\n\nimport { ApolloLink } from \"@apollo/client/link\";\nimport { BatchLink } from \"@apollo/client/link/batch\";\nimport type { BaseHttpLink } from \"@apollo/client/link/http\";\nimport {\n  checkFetcher,\n  defaultPrinter,\n  fallbackHttpConfig,\n  parseAndCheckHttpResponse,\n  selectHttpOptionsAndBodyInternal,\n  selectURI,\n} from \"@apollo/client/link/http\";\nimport { filterOperationVariables } from \"@apollo/client/link/utils\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { compact } from \"@apollo/client/utilities/internal\";\nimport { maybe } from \"@apollo/client/utilities/internal/globals\";\n\nexport declare namespace BaseBatchHttpLink {\n  /**\n   * Options passed to `BaseBatchHttpLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `BatchHttpLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `BaseBatchHttpLink` constructor.\n   * > If a value is provided to both, the value in `context` takes precedence.\n   */\n  export interface ContextOptions extends BaseHttpLink.ContextOptions {}\n  /**\n   * Configuration options for creating a `BaseBatchHttpLink` instance.\n   *\n   * > [!NOTE]\n   * > Some of these options are also available to override in [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n   * > Context options override the options passed to the constructor. Treat\n   * > these options as default values that are used when the request context\n   * > does not override the value.\n   */\n  interface Options\n    extends BatchLink.Shared.Options,\n      BaseHttpLink.Shared.Options {\n    /** {@inheritDoc @apollo/client/link/batch!BatchLink.Shared.Options#batchMax:member {\"defaultValue\": 10}} */\n    batchMax?: number;\n  }\n}\n\nconst backupFetch = maybe(() => fetch);\n\n/**\n * `BaseBatchHttpLink` is a terminating link that batches array of individual\n * GraphQL operations into a single HTTP request that's sent to a single GraphQL\n * endpoint. It serves as a base link to `BatchHttpLink`.\n *\n * @remarks\n *\n * > [!NOTE]\n * > Prefer using `BatchHttpLink` over `BaseBatchHttpLink`. Use\n * > `BaseBatchHttpLink` when you need to disable client awareness features and\n * > would like to tree-shake the implementation of `ClientAwarenessLink` out\n * > of your app bundle.\n *\n * @example\n *\n * ```ts\n * import { BaseBatchHttpLink } from \"@apollo/client/link/batch-http\";\n *\n * const link = new BaseBatchHttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   batchMax: 5, // No more than 5 operations per batch\n *   batchInterval: 20, // Wait no more than 20ms after first batched operation\n * });\n * ```\n */\nexport class BaseBatchHttpLink extends ApolloLink {\n  private batchDebounce?: boolean;\n  private batchInterval: number;\n  private batchMax: number;\n  private batcher: ApolloLink;\n\n  constructor(options: BaseBatchHttpLink.Options = {}) {\n    super();\n\n    let {\n      uri = \"/graphql\",\n      // use default global fetch if nothing is passed in\n      fetch: preferredFetch,\n      print = defaultPrinter,\n      includeExtensions,\n      preserveHeaderCase,\n      batchInterval,\n      batchDebounce,\n      batchMax,\n      batchKey,\n      includeUnusedVariables = false,\n      ...requestOptions\n    } = options;\n\n    if (__DEV__) {\n      // Make sure at least one of preferredFetch, window.fetch, or backupFetch\n      // is defined, so requests won't fail at runtime.\n      checkFetcher(preferredFetch || backupFetch);\n    }\n\n    const linkConfig = {\n      http: compact({ includeExtensions, preserveHeaderCase }),\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers,\n    };\n\n    this.batchDebounce = batchDebounce;\n    this.batchInterval = batchInterval || 10;\n    this.batchMax = batchMax || 10;\n\n    const batchHandler: BatchLink.BatchHandler = (operations) => {\n      const chosenURI = selectURI(operations[0], uri);\n\n      const context = operations[0].getContext();\n\n      const contextConfig = {\n        http: context.http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers,\n      };\n\n      //uses fallback, link, and then context to build options\n      const optsAndBody = operations.map((operation) => {\n        const result = selectHttpOptionsAndBodyInternal(\n          operation,\n          print,\n          fallbackHttpConfig,\n          linkConfig,\n          contextConfig\n        );\n\n        if (result.body.variables && !includeUnusedVariables) {\n          result.body.variables = filterOperationVariables(\n            result.body.variables,\n            operation.query\n          );\n        }\n\n        return result;\n      });\n\n      const loadedBody = optsAndBody.map(({ body }) => body);\n      const options = optsAndBody[0].options;\n\n      // There's no spec for using GET with batches.\n      if (options.method === \"GET\") {\n        return throwError(\n          () =>\n            new Error(\"apollo-link-batch-http does not support GET requests\")\n        );\n      }\n\n      try {\n        (options as any).body = JSON.stringify(loadedBody);\n      } catch (parseError) {\n        return throwError(() => parseError);\n      }\n\n      let controller: AbortController | undefined;\n      if (!options.signal && typeof AbortController !== \"undefined\") {\n        controller = new AbortController();\n        options.signal = controller.signal;\n      }\n\n      return new Observable((observer) => {\n        // Prefer BatchHttpLink.Options.fetch (preferredFetch) if provided, and\n        // otherwise fall back to the *current* global window.fetch function\n        // (see issue #7832), or (if all else fails) the backupFetch function we\n        // saved when this module was first evaluated. This last option protects\n        // against the removal of window.fetch, which is unlikely but not\n        // impossible.\n        const currentFetch =\n          preferredFetch || maybe(() => fetch) || backupFetch;\n\n        currentFetch!(chosenURI, options)\n          .then((response) => {\n            // Make the raw response available in the context.\n            operations.forEach((operation) =>\n              operation.setContext({ response })\n            );\n            return response;\n          })\n          .then(parseAndCheckHttpResponse(operations))\n          .then((result) => {\n            controller = undefined;\n            // we have data and can send it to back up the link chain\n            observer.next(result);\n            observer.complete();\n            return result;\n          })\n          .catch((err) => {\n            controller = undefined;\n            observer.error(err);\n          });\n\n        return () => {\n          // XXX support canceling this request\n          // https://developers.google.com/web/updates/2017/09/abortable-fetch\n          if (controller) controller.abort();\n        };\n      });\n    };\n\n    batchKey =\n      batchKey ||\n      ((operation: ApolloLink.Operation) => {\n        const context = operation.getContext();\n\n        const contextConfig = {\n          http: context.http,\n          options: context.fetchOptions,\n          credentials: context.credentials,\n          headers: context.headers,\n        };\n\n        //may throw error if config not serializable\n        return selectURI(operation, uri) + JSON.stringify(contextConfig);\n      });\n\n    this.batcher = new BatchLink({\n      batchDebounce: this.batchDebounce,\n      batchInterval: this.batchInterval,\n      batchMax: this.batchMax,\n      batchKey,\n      batchHandler,\n    });\n  }\n\n  public request(\n    operation: ApolloLink.Operation,\n    forward: ApolloLink.ForwardFunction\n  ): Observable<ApolloLink.Result> {\n    return this.batcher.request(operation, forward);\n  }\n}\n"]}
{"version":3,"file":"createOperation.js","sourceRoot":"","sources":["../../../src/link/utils/createOperation.ts"],"names":[],"mappings":"AACA,OAAO,EACL,sBAAsB,EACtB,gBAAgB,GACjB,MAAM,mCAAmC,CAAC;AAE3C,MAAM,UAAU,eAAe,CAC7B,OAA2B,EAC3B,EAAE,MAAM,EAA6B;IAErC,MAAM,SAAS,GAAG;QAChB,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,EAAE;QAClC,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,EAAE;QACpC,aAAa,EAAE,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC;QAC9C,aAAa,EAAE,sBAAsB,CAAC,OAAO,CAAC,KAAK,CAAE,CAAC,SAAS;KAIxC,CAAC;IAE1B,IAAI,OAAO,GAAG,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAErC,MAAM,UAAU,GAAuC,CAAC,IAAI,EAAE,EAAE;QAC9D,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,CAAC;YAC/B,OAAO,GAAG,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;QAClD,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,EAAE,CAAC;QACpC,CAAC;IACH,CAAC,CAAC;IACF,MAAM,UAAU,GAAuC,GAAG,EAAE,CAC1D,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;IAEhC,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,YAAY,EAAE;QAC7C,UAAU,EAAE,KAAK;QACjB,KAAK,EAAE,UAAU;KAClB,CAAC,CAAC;IAEH,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,YAAY,EAAE;QAC7C,UAAU,EAAE,KAAK;QACjB,KAAK,EAAE,UAAU;KAClB,CAAC,CAAC;IAEH,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE;QACzC,UAAU,EAAE,KAAK;QACjB,KAAK,EAAE,MAAM;KACd,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import type { ApolloLink } from \"@apollo/client/link\";\nimport {\n  getOperationDefinition,\n  getOperationName,\n} from \"@apollo/client/utilities/internal\";\n\nexport function createOperation(\n  request: ApolloLink.Request,\n  { client }: ApolloLink.ExecuteContext\n): ApolloLink.Operation {\n  const operation = {\n    query: request.query,\n    variables: request.variables || {},\n    extensions: request.extensions || {},\n    operationName: getOperationName(request.query),\n    operationType: getOperationDefinition(request.query)!.operation,\n  } satisfies Omit<\n    ApolloLink.Operation,\n    \"client\" | \"getContext\" | \"setContext\"\n  > as ApolloLink.Operation;\n\n  let context = { ...request.context };\n\n  const setContext: ApolloLink.Operation[\"setContext\"] = (next) => {\n    if (typeof next === \"function\") {\n      context = { ...context, ...next(getContext()) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext: ApolloLink.Operation[\"getContext\"] = () =>\n    Object.freeze({ ...context });\n\n  Object.defineProperty(operation, \"setContext\", {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, \"getContext\", {\n    enumerable: false,\n    value: getContext,\n  });\n\n  Object.defineProperty(operation, \"client\", {\n    enumerable: false,\n    value: client,\n  });\n\n  return operation;\n}\n"]}
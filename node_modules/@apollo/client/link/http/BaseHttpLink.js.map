{"version":3,"file":"BaseHttpLink.js","sourceRoot":"","sources":["../../../src/link/http/BaseHttpLink.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ASTNode, print } from \"graphql\";\nimport { Observable } from \"rxjs\";\n\nimport { ApolloLink } from \"@apollo/client/link\";\nimport { filterOperationVariables } from \"@apollo/client/link/utils\";\nimport {\n  isMutationOperation,\n  isSubscriptionOperation,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { compact } from \"@apollo/client/utilities/internal\";\nimport { maybe } from \"@apollo/client/utilities/internal/globals\";\n\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport {\n  parseAndCheckHttpResponse,\n  readMultipartBody,\n} from \"./parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport {\n  defaultPrinter,\n  fallbackHttpConfig,\n  selectHttpOptionsAndBodyInternal,\n} from \"./selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"./selectURI.js\";\n\nconst backupFetch = maybe(() => fetch);\nfunction noop() {}\n\nexport declare namespace BaseHttpLink {\n  /**\n   * Options passed to `BaseHttpLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `BaseHttpLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `HttpLink` constructor.\n   * > If a value is provided to both, the value in `context` takes precedence.\n   */\n  interface ContextOptions {\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#uri:member} */\n    uri?: string | BaseHttpLink.UriFunction;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#headers:member} */\n    headers?: Record<string, string>;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#credentials:member} */\n    credentials?: RequestCredentials;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#fetchOptions:member} */\n    fetchOptions?: RequestInit;\n\n    /**\n     * An object that configures advanced functionality, such as support for\n     * persisted queries.\n     */\n    http?: BaseHttpLink.HttpOptions;\n  }\n\n  /**\n   * Options passed to `BaseHttpLink` through the `http` property of a request\n   * context.\n   */\n  export interface HttpOptions {\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#includeExtensions:member} */\n    includeExtensions?: boolean;\n\n    /**\n     * If `false`, the GraphQL query string is not included in the request. Set\n     * this option if you're sending a request that uses a [persisted query](https://www.apollographql.com/docs/react/api/link/persisted-queries/).\n     *\n     * @defaultValue `true`\n     */\n    includeQuery?: boolean;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#preserveHeaderCase:member} */\n    preserveHeaderCase?: boolean;\n\n    /**\n     * A list of additional `accept` headers to include in the request,\n     * as defined in https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2\n     *\n     * @example\n     *\n     * ```json\n     * [\"application/custom+json;q=1.0\"]\n     * ```\n     */\n    accept?: string[];\n  }\n\n  export namespace Shared {\n    /** These options are shared between `BaseHttpLink` and `BaseBatchHttpLink` */\n    export interface Options {\n      /**\n       * The URL of the GraphQL endpoint to send requests to. Can also be a\n       * function that accepts an `ApolloLink.Operation` object and returns the\n       * string URL to use for that operation.\n       *\n       * @defaultValue \"/graphql\"\n       */\n      uri?: string | BaseHttpLink.UriFunction;\n\n      /**\n       * If `true`, includes the `extensions` field in operations sent to your\n       * GraphQL endpoint.\n       *\n       * @defaultValue true\n       */\n      includeExtensions?: boolean;\n\n      /**\n       * A function to use instead of calling the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) directly\n       * when sending HTTP requests to your GraphQL endpoint. The function must\n       * conform to the signature of `fetch`.\n       *\n       * By default, the Fetch API is used unless it isn't available in your\n       * runtime environment.\n       *\n       * See [Customizing `fetch`](https://apollographql.com/docs/react/api/link/introduction#customizing-fetch).\n       */\n      fetch?: typeof fetch;\n\n      /**\n       * An object representing headers to include in every HTTP request.\n       *\n       * @example\n       *\n       * ```json\n       * {\n       *   \"Authorization\": \"Bearer 1234\"\n       * }\n       * ```\n       */\n      headers?: Record<string, string>;\n\n      /**\n       * If `true`, header names won't be automatically normalized to lowercase.\n       * This allows for non-http-spec-compliant servers that might expect\n       * capitalized header names.\n       *\n       * @defaultValue false\n       */\n      preserveHeaderCase?: boolean;\n\n      /**\n       * The credentials policy to use for each `fetch` call.\n       */\n      credentials?: RequestCredentials;\n\n      /**\n       * Any overrides of the fetch options argument to pass to the fetch call.\n       *\n       * An object containing options to use for each call to `fetch`. If a\n       * particular option is not included in this object, the default value of\n       * that option is used.\n       *\n       * > [!NOTE]\n       * > If you set `fetchOptions.method` to `GET`, `HttpLink` follows [standard\n       * > GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request).\n       *\n       * See [available options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n       */\n      fetchOptions?: RequestInit;\n\n      /**\n       * If `true`, unused variables from the operation will not be stripped from\n       * the request and will instead be sent to the GraphQL endpoint.\n       *\n       * @remarks\n       * Unused variables are likely to trigger server-side validation errors,\n       * per https://spec.graphql.org/draft/#sec-All-Variables-Used.\n       * `includeUnusedVariables` can be useful if your server deviates\n       * from the GraphQL specification by not strictly enforcing that rule.\n       *\n       * @defaultValue false\n       */\n      includeUnusedVariables?: boolean;\n      /**\n       * A function to use when transforming a GraphQL document into a string. It\n       * accepts an `ASTNode` (typically a `DocumentNode`) and the original `print`\n       * function as arguments, and is expected to return a string. This option\n       * enables you to, for example, use `stripIgnoredCharacters` to remove\n       * whitespace from queries.\n       *\n       * By default the [GraphQL `print` function](https://graphql.org/graphql-js/language/#print) is used.\n       *\n       * @example\n       *\n       * ```ts\n       * import { stripIgnoredCharacters } from \"graphql\";\n       *\n       * const httpLink = new HttpLink({\n       *   uri: \"/graphql\",\n       *   print: (ast, originalPrint) => stripIgnoredCharacters(originalPrint(ast)),\n       * });\n       * ```\n       */\n      print?: BaseHttpLink.Printer;\n    }\n  }\n\n  /**\n   * Options provided to the `BaseHttpLink` constructor.\n   *\n   * > [!NOTE]\n   * > Some of these options are also available to override in [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n   * > Context options override the options passed to the constructor. Treat\n   * > these options as default values that are used when the request context\n   * > does not override the value.\n   */\n  interface Options extends Shared.Options {\n    /**\n     * If `true`, the link uses an HTTP `GET` request when sending query\n     * operations to your GraphQL endpoint. Mutation operations continue to use\n     * `POST` requests. If you want all operations to use `GET` requests,\n     * set `fetchOptions.method` instead.\n     *\n     * @defaultValue false\n     */\n    useGETForQueries?: boolean;\n  }\n\n  interface Body {\n    query?: string;\n    operationName?: string;\n    variables?: Record<string, any>;\n    extensions?: Record<string, any>;\n  }\n\n  type Printer = (node: ASTNode, originalPrint: typeof print) => string;\n  type UriFunction = (operation: ApolloLink.Operation) => string;\n}\n\n/**\n * `BaseHttpLink` is a terminating link that sends a GraphQL operation to a\n * remote endpoint over HTTP. It serves as a base link to `HttpLink`.\n *\n * @remarks\n *\n * `BaseHttpLink` supports both POST and GET requests, and you can configure\n * HTTP options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * > [!NOTE]\n * > Prefer using `HttpLink` over `BaseHttpLink`. Use `BaseHttpLink` when you\n * > need to disable client awareness features and would like to tree-shake\n * > the implementation of `ClientAwarenessLink` out of your app bundle.\n *\n * @example\n *\n * ```ts\n * import { BaseHttpLink } from \"@apollo/client/link/http\";\n *\n * const link = new BaseHttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   headers: {\n *     authorization: `Bearer ${token}`,\n *   },\n * });\n * ```\n */\nexport class BaseHttpLink extends ApolloLink {\n  constructor(options: BaseHttpLink.Options = {}) {\n    let {\n      uri = \"/graphql\",\n      // use default global fetch if nothing passed in\n      fetch: preferredFetch,\n      print = defaultPrinter,\n      includeExtensions,\n      preserveHeaderCase,\n      useGETForQueries,\n      includeUnusedVariables = false,\n      ...requestOptions\n    } = options;\n\n    if (__DEV__) {\n      // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n      // defined, so requests won't fail at runtime.\n      checkFetcher(preferredFetch || backupFetch);\n    }\n\n    const linkConfig = {\n      http: compact({ includeExtensions, preserveHeaderCase }),\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers,\n    };\n\n    super((operation) => {\n      let chosenURI = selectURI(operation, uri);\n\n      const context = operation.getContext();\n\n      const http = { ...context.http };\n      if (isSubscriptionOperation(operation.query)) {\n        http.accept = [\n          \"multipart/mixed;boundary=graphql;subscriptionSpec=1.0\",\n          ...(http.accept || []),\n        ];\n      }\n\n      const contextConfig = {\n        http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers,\n      };\n\n      //uses fallback, link, and then context to build options\n      const { options, body } = selectHttpOptionsAndBodyInternal(\n        operation,\n        print,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      );\n\n      if (body.variables && !includeUnusedVariables) {\n        body.variables = filterOperationVariables(\n          body.variables,\n          operation.query\n        );\n      }\n\n      let controller: AbortController | undefined = new AbortController();\n      let cleanupController = () => {\n        controller = undefined;\n      };\n      if (options.signal) {\n        const externalSignal: AbortSignal = options.signal;\n        // in an ideal world we could use `AbortSignal.any` here, but\n        // React Native uses https://github.com/mysticatea/abort-controller as\n        // a polyfill for `AbortController`, and it does not support `AbortSignal.any`.\n\n        const listener = () => {\n          controller?.abort(externalSignal.reason);\n        };\n        externalSignal.addEventListener(\"abort\", listener, { once: true });\n        cleanupController = () => {\n          controller?.signal.removeEventListener(\"abort\", cleanupController);\n          controller = undefined;\n          // on cleanup, we need to stop listening to `options.signal` to avoid memory leaks\n          externalSignal.removeEventListener(\"abort\", listener);\n          cleanupController = noop;\n        };\n        // react native also does not support the addEventListener `signal` option\n        // so we have to simulate that ourself\n        controller.signal.addEventListener(\"abort\", cleanupController, {\n          once: true,\n        });\n      }\n      options.signal = controller.signal;\n\n      if (useGETForQueries && !isMutationOperation(operation.query)) {\n        options.method = \"GET\";\n      }\n\n      return new Observable((observer) => {\n        if (options.method === \"GET\") {\n          const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n          if (parseError) {\n            throw parseError;\n          }\n          chosenURI = newURI;\n        } else {\n          options.body = JSON.stringify(body);\n        }\n        // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n        // fall back to the *current* global window.fetch function (see issue\n        // #7832), or (if all else fails) the backupFetch function we saved when\n        // this module was first evaluated. This last option protects against the\n        // removal of window.fetch, which is unlikely but not impossible.\n        const currentFetch =\n          preferredFetch || maybe(() => fetch) || backupFetch;\n\n        const observerNext = observer.next.bind(observer);\n        currentFetch!(chosenURI, options)\n          .then((response) => {\n            operation.setContext({ response });\n            const ctype = response.headers?.get(\"content-type\");\n\n            if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n              return readMultipartBody(response, observerNext);\n            } else {\n              return parseAndCheckHttpResponse(operation)(response).then(\n                observerNext\n              );\n            }\n          })\n          .then(() => {\n            cleanupController();\n            observer.complete();\n          })\n          .catch((err) => {\n            cleanupController();\n            observer.error(err);\n          });\n\n        return () => {\n          // XXX support canceling this request\n          // https://developers.google.com/web/updates/2017/09/abortable-fetch\n          if (controller) controller.abort();\n        };\n      });\n    });\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/link/context/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AA0DjD;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,UAAU,CAAC,MAA0C;IACnE,OAAO,IAAI,cAAc,CAAC,CAAC,WAAW,EAAE,SAAS,EAAE,EAAE,CACnD,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAC/B,CAAC;AACJ,CAAC;AACD;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,OAAO,cAAe,SAAQ,UAAU;IAC5C,YAAY,MAAoC;QAC9C,KAAK,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE;YAC3B,MAAM,EAAE,GAAG,OAAO,EAAE,GAAG,SAA+C,CAAC;YAEvE,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE;gBACvC,UAAU,EAAE,KAAK;gBACjB,KAAK,EAAE,SAAS,CAAC,MAAM;aACxB,CAAC,CAAC;YAEH,OAAO,IAAI,UAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACjC,IAAI,MAAM,GAAG,KAAK,CAAC;gBACnB,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;qBACrB,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,GAAG,CAAC,CAAC;qBAClD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;qBAC1B,IAAI,CAAC,GAAG,EAAE;oBACT,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACzC,CAAC;gBACH,CAAC,CAAC;qBACD,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAExC,OAAO,GAAG,EAAE;oBACV,MAAM,GAAG,IAAI,CAAC;gBAChB,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { Observable } from \"rxjs\";\n\nimport { ApolloLink } from \"@apollo/client/link\";\n\nexport declare namespace SetContextLink {\n  namespace SetContextLinkDocumentationTypes {\n    /**\n     * A function that returns an updated context object for an Apollo Link\n     * operation.\n     *\n     * The context setter function is called for each operation and allows you to\n     * modify the operation's context before it's passed to the next link in the\n     * chain. The returned context object is shallowly merged with the previous\n     * context object.\n     *\n     * @param prevContext - The previous context of the operation (e.g. the value\n     * of `operation.getContext()`)\n     * @param operation - The GraphQL operation being executed, without the\n     * `getContext` and `setContext` methods\n     * @returns A partial context object or a promise that resolves to a partial context object\n     */\n    export function ContextSetter(\n      prevContext: Readonly<ApolloLink.OperationContext>,\n      operation: SetContextLink.SetContextOperation\n    ):\n      | Promise<Partial<ApolloLink.OperationContext>>\n      | Partial<ApolloLink.OperationContext>;\n  }\n\n  /** {@inheritDoc @apollo/client/link/context!SetContextLink.SetContextLinkDocumentationTypes.ContextSetter:function(1)} */\n  export type ContextSetter = (\n    prevContext: Readonly<ApolloLink.OperationContext>,\n    operation: SetContextLink.SetContextOperation\n  ) =>\n    | Promise<Partial<ApolloLink.OperationContext>>\n    | Partial<ApolloLink.OperationContext>;\n\n  /**\n   * @deprecated\n   * Use `ContextSetter` instead. This type is used by the deprecated\n   * `setContext` function.\n   */\n  export type LegacyContextSetter = (\n    operation: SetContextLink.SetContextOperation,\n    prevContext: Readonly<ApolloLink.OperationContext>\n  ) =>\n    | Promise<Partial<ApolloLink.OperationContext>>\n    | Partial<ApolloLink.OperationContext>;\n\n  /**\n   * An `ApolloLink.Operation` object without the `getContext` and `setContext`\n   * methods. This prevents context setters from directly manipulating the\n   * context during the setter function execution.\n   */\n  export type SetContextOperation = Omit<\n    ApolloLink.Operation,\n    \"getContext\" | \"setContext\"\n  >;\n}\n\n/**\n * @deprecated\n * Use `SetContextLink` from `@apollo/client/link/context` instead. Note you\n * will need to flip the arguments when using `SetContextLink` as `prevContext`\n * is the first argument.\n *\n * ```ts\n * new SetContextLink((prevContext, operation) => {\n *   // ...\n * });\n * ```\n */\nexport function setContext(setter: SetContextLink.LegacyContextSetter) {\n  return new SetContextLink((prevContext, operation) =>\n    setter(operation, prevContext)\n  );\n}\n/**\n * `SetContextLink` is a non-terminating link that allows you to modify the\n * context of GraphQL operations before they're passed to the next link in the\n * chain. This is commonly used for authentication, adding headers, and other\n * request-time configuration.\n *\n * @example\n *\n * ```ts\n * import { SetContextLink } from \"@apollo/client/link/context\";\n *\n * const link = new SetContextLink((prevContext, operation) => {\n *   return {\n *     credentials: \"include\",\n *     // ...\n *   };\n * });\n * ```\n */\nexport class SetContextLink extends ApolloLink {\n  constructor(setter: SetContextLink.ContextSetter) {\n    super((operation, forward) => {\n      const { ...request } = operation as SetContextLink.SetContextOperation;\n\n      Object.defineProperty(request, \"client\", {\n        enumerable: false,\n        value: operation.client,\n      });\n\n      return new Observable((observer) => {\n        let closed = false;\n        Promise.resolve(request)\n          .then((req) => setter(operation.getContext(), req))\n          .then(operation.setContext)\n          .then(() => {\n            if (!closed) {\n              forward(operation).subscribe(observer);\n            }\n          })\n          .catch(observer.error.bind(observer));\n\n        return () => {\n          closed = true;\n        };\n      });\n    });\n  }\n}\n"]}
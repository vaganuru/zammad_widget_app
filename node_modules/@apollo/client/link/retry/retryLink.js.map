{"version":3,"file":"retryLink.js","sourceRoot":"","sources":["../../../src/link/retry/retryLink.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Subscription } from \"rxjs\";\nimport type { Observer } from \"rxjs\";\nimport { Observable } from \"rxjs\";\n\nimport type { ErrorLike } from \"@apollo/client\";\nimport {\n  graphQLResultHasProtocolErrors,\n  PROTOCOL_ERRORS_SYMBOL,\n  toErrorLike,\n} from \"@apollo/client/errors\";\nimport { ApolloLink } from \"@apollo/client/link\";\n\nimport { buildDelayFunction } from \"./delayFunction.js\";\nimport { buildRetryFunction } from \"./retryFunction.js\";\n\nexport declare namespace RetryLink {\n  namespace RetryLinkDocumentationTypes {\n    /**\n     * A function used to determine whether to retry the current operation.\n     *\n     * @param attempt - The current attempt number\n     * @param operation - The current `ApolloLink.Operation` for the request\n     * @param error - The error that triggered the retry attempt\n     * @returns A boolean to indicate whether to retry the current operation\n     */\n    function AttemptsFunction(\n      attempt: number,\n      operation: ApolloLink.Operation,\n      error: ErrorLike\n    ): boolean | Promise<boolean>;\n\n    /**\n     * A function used to determine the delay for a retry attempt.\n     *\n     * @param attempt - The current attempt number\n     * @param operation - The current `ApolloLink.Operation` for the request\n     * @param error - The error that triggered the retry attempt\n     * @returns The delay in milliseconds before attempting the request again\n     */\n    function DelayFunction(\n      attempt: number,\n      operation: ApolloLink.Operation,\n      error: ErrorLike\n    ): number;\n  }\n\n  /** {@inheritDoc @apollo/client/link/retry!RetryLink.RetryLinkDocumentationTypes.DelayFunction:function(1)} */\n  export type DelayFunction = (\n    attempt: number,\n    operation: ApolloLink.Operation,\n    error: ErrorLike\n  ) => number;\n\n  /**\n   * Configuration options for the standard retry delay strategy.\n   */\n  export interface DelayOptions {\n    /**\n     * The number of milliseconds to wait before attempting the first retry.\n     *\n     * Delays will increase exponentially for each attempt. E.g. if this is\n     * set to 100, subsequent retries will be delayed by 200, 400, 800, etc,\n     * until they reach the maximum delay.\n     *\n     * Note that if jittering is enabled, this is the average delay.\n     *\n     * @defaultValue `300`\n     */\n    initial?: number;\n\n    /**\n     * The maximum number of milliseconds that the link should wait for any\n     * retry.\n     *\n     * @defaultValue `Infinity`\n     */\n    max?: number;\n\n    /**\n     * Whether delays between attempts should be randomized.\n     *\n     * This helps avoid [thundering herd](https://en.wikipedia.org/wiki/Thundering_herd_problem)\n     * type situations by better distributing load during major outages. Without\n     * these strategies, when your server comes back up it will be hit by all\n     * of your clients at once, possibly causing it to go down again.\n     *\n     * @defaultValue `true`\n     */\n    jitter?: boolean;\n  }\n\n  /** {@inheritDoc @apollo/client/link/retry!RetryLink.RetryLinkDocumentationTypes.AttemptsFunction:function(1)} */\n  export type AttemptsFunction = (\n    attempt: number,\n    operation: ApolloLink.Operation,\n    error: ErrorLike\n  ) => boolean | Promise<boolean>;\n\n  /**\n   * Configuration options for the standard retry attempt strategy.\n   */\n  export interface AttemptsOptions {\n    /**\n     * The max number of times to try a single operation before giving up.\n     *\n     * Note that this INCLUDES the initial request as part of the count.\n     * E.g. `max` of 1 indicates no retrying should occur.\n     *\n     * Pass `Infinity` for infinite retries.\n     *\n     * @defaultValue `5`\n     */\n    max?: number;\n\n    /**\n     * Predicate function that determines whether a particular error should\n     * trigger a retry.\n     *\n     * For example, you may want to not retry 4xx class HTTP errors.\n     *\n     * @defaultValue `() => true`\n     */\n    retryIf?: (\n      error: ErrorLike,\n      operation: ApolloLink.Operation\n    ) => boolean | Promise<boolean>;\n  }\n\n  /**\n   * Options provided to the `RetryLink` constructor.\n   */\n  export interface Options {\n    /**\n     * Configuration for the delay strategy to use, or a custom delay strategy.\n     */\n    delay?: RetryLink.DelayOptions | RetryLink.DelayFunction;\n\n    /**\n     * Configuration for the retry strategy to use, or a custom retry strategy.\n     */\n    attempts?: RetryLink.AttemptsOptions | RetryLink.AttemptsFunction;\n  }\n}\n\nclass RetryableOperation {\n  private retryCount: number = 0;\n  private currentSubscription: Subscription | null = null;\n  private timerId: ReturnType<typeof setTimeout> | undefined;\n\n  constructor(\n    private observer: Observer<ApolloLink.Result>,\n    private operation: ApolloLink.Operation,\n    private forward: ApolloLink.ForwardFunction,\n    private delayFor: RetryLink.DelayFunction,\n    private retryIf: RetryLink.AttemptsFunction\n  ) {\n    this.try();\n  }\n\n  /**\n   * Stop retrying for the operation, and cancel any in-progress requests.\n   */\n  public cancel() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n    }\n    clearTimeout(this.timerId);\n    this.timerId = undefined;\n    this.currentSubscription = null;\n  }\n\n  private try() {\n    this.currentSubscription = this.forward(this.operation).subscribe({\n      next: (result) => {\n        if (graphQLResultHasProtocolErrors(result)) {\n          this.onError(result.extensions[PROTOCOL_ERRORS_SYMBOL], () =>\n            // Pretend like we never encountered this error and move the result\n            // along for Apollo Client core to handle this error.\n            this.observer.next(result)\n          );\n          // Unsubscribe from the current subscription to prevent the `complete`\n          // handler to be called as a result of the stream closing.\n          this.currentSubscription?.unsubscribe();\n          return;\n        }\n\n        this.observer.next(result);\n      },\n      error: (error) => this.onError(error, () => this.observer.error(error)),\n      complete: this.observer.complete.bind(this.observer),\n    });\n  }\n\n  private onError = async (error: unknown, onContinue: () => void) => {\n    this.retryCount += 1;\n    const errorLike = toErrorLike(error);\n\n    const shouldRetry = await this.retryIf(\n      this.retryCount,\n      this.operation,\n      errorLike\n    );\n    if (shouldRetry) {\n      this.scheduleRetry(\n        this.delayFor(this.retryCount, this.operation, errorLike)\n      );\n      return;\n    }\n\n    onContinue();\n  };\n\n  private scheduleRetry(delay: number) {\n    if (this.timerId) {\n      throw new Error(`RetryLink BUG! Encountered overlapping retries`);\n    }\n\n    this.timerId = setTimeout(() => {\n      this.timerId = undefined;\n      this.try();\n    }, delay);\n  }\n}\n\n/**\n * `RetryLink` is a non-terminating link that attempts to retry operations that\n * fail due to network errors. It enables resilient GraphQL operations by\n * automatically retrying failed requests with configurable delay and retry\n * strategies.\n *\n * @remarks\n *\n * `RetryLink` is particularly useful for handling unreliable network conditions\n * where you would rather wait longer than explicitly fail an operation. It\n * provides exponential backoff and jitters delays between attempts by default.\n *\n * > [!NOTE]\n * > This link does not handle retries for GraphQL errors in the response. Use\n * > `ErrorLink` to retry an operation after a GraphQL error. For more\n * > information, see the [Error handling documentation](https://apollographql.com/docs/react/data/error-handling#on-graphql-errors).\n *\n * @example\n *\n * ```ts\n * import { RetryLink } from \"@apollo/client/link/retry\";\n *\n * const link = new RetryLink();\n * ```\n */\nexport class RetryLink extends ApolloLink {\n  private delayFor: RetryLink.DelayFunction;\n  private retryIf: RetryLink.AttemptsFunction;\n\n  constructor(options?: RetryLink.Options) {\n    super();\n    const { attempts, delay } = options || ({} as RetryLink.Options);\n    this.delayFor =\n      typeof delay === \"function\" ? delay : buildDelayFunction(delay);\n    this.retryIf =\n      typeof attempts === \"function\" ? attempts : buildRetryFunction(attempts);\n  }\n\n  public request(\n    operation: ApolloLink.Operation,\n    forward: ApolloLink.ForwardFunction\n  ): Observable<ApolloLink.Result> {\n    return new Observable((observer) => {\n      const retryable = new RetryableOperation(\n        observer,\n        operation,\n        forward,\n        this.delayFor,\n        this.retryIf\n      );\n      return () => {\n        retryable.cancel();\n      };\n    });\n  }\n}\n"]}
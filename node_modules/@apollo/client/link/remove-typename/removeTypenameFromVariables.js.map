{"version":3,"file":"removeTypenameFromVariables.js","sourceRoot":"","sources":["../../../src/link/remove-typename/removeTypenameFromVariables.ts"],"names":[],"mappings":"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","sourcesContent":["import { WeakCache } from \"@wry/caches\";\nimport type { DocumentNode, TypeNode } from \"graphql\";\nimport { Kind, visit } from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport type { OperationVariables } from \"@apollo/client\";\nimport { ApolloLink } from \"@apollo/client/link\";\nimport { cacheSizes, stripTypename } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { isPlainObject } from \"@apollo/client/utilities/internal\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\n\n/**\n * Sentinel value used to indicate that `__typename` fields should be kept\n * for a specific field or input type.\n *\n * @remarks\n * Use this value in the `except` configuration to preserve `__typename`\n * fields in JSON scalar fields or other cases where you need to retain\n * the typename information.\n *\n * @example\n *\n * ```ts\n * import {\n *   RemoveTypenameFromVariablesLink,\n *   KEEP,\n * } from \"@apollo/client/link/remove-typename\";\n *\n * const link = new RemoveTypenameFromVariablesLink({\n *   except: {\n *     JSON: KEEP, // Keep __typename for all JSON scalar variables\n *     DashboardInput: {\n *       config: KEEP, // Keep __typename only for the config field\n *     },\n *   },\n * });\n * ```\n */\nexport const KEEP = \"__KEEP\";\n\nexport declare namespace RemoveTypenameFromVariablesLink {\n  /**\n   * Configuration object that specifies which input types and fields should\n   * retain their `__typename` fields.\n   *\n   * @remarks\n   * This is a recursive configuration where:\n   *\n   * - Keys represent GraphQL input type names or field names\n   * - Values can be either the `KEEP` sentinel to preserve all `__typename`\n   *   fields, or a nested `KeepTypenameConfig` to preserve `__typename` fields on\n   *   a specific field name.\n   *\n   * @example\n   *\n   * ```ts\n   * const config: KeepTypenameConfig = {\n   *   // Keep __typename for all JSON scalar variables\n   *   JSON: KEEP,\n   *\n   *   // For DashboardInput, only keep __typename on the config field\n   *   DashboardInput: {\n   *     config: KEEP,\n   *   },\n   *\n   *   // Nested configuration for complex input types\n   *   UserInput: {\n   *     profile: {\n   *       settings: KEEP,\n   *     },\n   *   },\n   * };\n   * ```\n   */\n  export interface KeepTypenameConfig {\n    [key: string]:\n      | typeof KEEP\n      | RemoveTypenameFromVariablesLink.KeepTypenameConfig;\n  }\n\n  /**\n   * Options for configuring the `RemoveTypenameFromVariablesLink`.\n   */\n  export interface Options {\n    /**\n     * Configuration that determines which input types should retain `__typename`\n     * fields.\n     *\n     * Maps GraphQL input type names to configurations. Each configuration can\n     * either be the `KEEP` sentinel, to preserve all `__typename` fields, or\n     * a nested object that specifies which fields should retain `__typename`.\n     *\n     * @example\n     *\n     * ```ts\n     * {\n     *   except: {\n     *     // Keep __typename for all JSON scalar variables\n     *     JSON: KEEP,\n     *\n     *     // For DashboardInput, remove __typename except for config field\n     *     DashboardInput: {\n     *       config: KEEP,\n     *     },\n     *\n     *     // Complex nested configuration\n     *     UserProfileInput: {\n     *       settings: {\n     *         preferences: KEEP,\n     *       },\n     *     },\n     *   },\n     * }\n     * ```\n     */\n    except?: RemoveTypenameFromVariablesLink.KeepTypenameConfig;\n  }\n}\n\n/**\n * @deprecated\n * Use `RemoveTypenameFromVariablesLink` from `@apollo/client/link/remove-typename` instead.\n */\nexport function removeTypenameFromVariables(\n  options?: RemoveTypenameFromVariablesLink.Options\n) {\n  return new RemoveTypenameFromVariablesLink(options);\n}\n\n/**\n * `RemoveTypenameFromVariablesLink` is a non-terminating link that automatically\n * removes `__typename` fields from operation variables to prevent GraphQL\n * validation errors.\n *\n * @remarks\n *\n * When reusing data from a query as input to another GraphQL operation,\n * `__typename` fields can cause server-side validation errors because input\n * types don't accept fields that start with double underscores (`__`).\n * `RemoveTypenameFromVariablesLink` automatically strips these fields from all\n * operation variables.\n *\n * @example\n *\n * ```ts\n * import { RemoveTypenameFromVariablesLink } from \"@apollo/client/link/remove-typename\";\n *\n * const link = new RemoveTypenameFromVariablesLink();\n * ```\n */\nexport class RemoveTypenameFromVariablesLink extends ApolloLink {\n  constructor(options: RemoveTypenameFromVariablesLink.Options = {}) {\n    super((operation, forward) => {\n      const { except } = options;\n      const { query, variables } = operation;\n\n      if (variables) {\n        operation.variables =\n          except ?\n            maybeStripTypenameUsingConfig(query, variables, except)\n          : stripTypename(variables);\n      }\n\n      return forward(operation);\n    });\n    return Object.assign(\n      this,\n      __DEV__ ?\n        {\n          getMemoryInternals() {\n            return {\n              removeTypenameFromVariables: {\n                getVariableDefinitions: getVariableDefinitions?.size ?? 0,\n              },\n            };\n          },\n        }\n      : {}\n    );\n  }\n}\n\nfunction maybeStripTypenameUsingConfig(\n  query: DocumentNode,\n  variables: OperationVariables,\n  config: RemoveTypenameFromVariablesLink.KeepTypenameConfig\n) {\n  const variableDefinitions = getVariableDefinitions(query);\n\n  return Object.fromEntries(\n    Object.entries(variables).map((keyVal) => {\n      const [key, value] = keyVal;\n      const typename = variableDefinitions[key];\n      const typenameConfig = config[typename];\n\n      keyVal[1] =\n        typenameConfig ?\n          maybeStripTypename(value, typenameConfig)\n        : stripTypename(value);\n\n      return keyVal;\n    })\n  );\n}\n\ntype JSONPrimitive = string | number | null | boolean;\ntype JSONValue = JSONPrimitive | JSONValue[] | { [key: string]: JSONValue };\n\nfunction maybeStripTypename(\n  value: JSONValue,\n  config: RemoveTypenameFromVariablesLink.KeepTypenameConfig[string]\n): JSONValue {\n  if (config === KEEP) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((item) => maybeStripTypename(item, config));\n  }\n\n  if (isPlainObject(value)) {\n    const modified: Record<string, any> = {};\n\n    Object.keys(value).forEach((key) => {\n      const child = value[key];\n\n      if (key === \"__typename\") {\n        return;\n      }\n\n      const fieldConfig = config[key];\n\n      modified[key] =\n        fieldConfig ?\n          maybeStripTypename(child, fieldConfig)\n        : stripTypename(child);\n    });\n\n    return modified;\n  }\n\n  return value;\n}\n\nconst getVariableDefinitions = wrap(\n  (document: DocumentNode) => {\n    const definitions: Record<string, string> = {};\n\n    visit(document, {\n      VariableDefinition(node) {\n        definitions[node.variable.name.value] = unwrapType(node.type);\n      },\n    });\n\n    return definitions;\n  },\n  {\n    max:\n      cacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] ||\n      defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"],\n    cache: WeakCache,\n  }\n);\n\nfunction unwrapType(node: TypeNode): string {\n  switch (node.kind) {\n    case Kind.NON_NULL_TYPE:\n      return unwrapType(node.type);\n    case Kind.LIST_TYPE:\n      return unwrapType(node.type);\n    case Kind.NAMED_TYPE:\n      return node.name.value;\n  }\n}\n"]}
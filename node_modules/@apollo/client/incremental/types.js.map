{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/incremental/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  DocumentNode,\n  FormattedExecutionResult,\n  GraphQLFormattedError,\n} from \"graphql\";\n\nimport type { ApolloLink } from \"@apollo/client/link\";\nimport type { DeepPartial } from \"@apollo/client/utilities\";\n\nexport declare namespace Incremental {\n  export type Path = ReadonlyArray<string | number>;\n\n  /** @internal */\n  export interface Handler<\n    Chunk extends Record<string, unknown> = Record<string, unknown>,\n  > {\n    isIncrementalResult: (result: ApolloLink.Result<any>) => result is Chunk;\n    prepareRequest: (request: ApolloLink.Request) => ApolloLink.Request;\n    extractErrors: (\n      result: ApolloLink.Result<any>\n    ) => readonly GraphQLFormattedError[] | undefined | void;\n    startRequest: <TData extends Record<string, unknown>>(request: {\n      query: DocumentNode;\n    }) => IncrementalRequest<Chunk, TData>;\n  }\n\n  export interface IncrementalRequest<\n    Chunk extends Record<string, unknown>,\n    TData,\n  > {\n    hasNext: boolean;\n    handle: (\n      cacheData: TData | DeepPartial<TData> | undefined | null,\n      chunk: Chunk\n    ) => FormattedExecutionResult<TData>;\n  }\n}\n"]}
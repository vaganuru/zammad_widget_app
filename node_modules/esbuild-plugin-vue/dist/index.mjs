// src/index.ts
import fs from "fs";
import path from "path";
import hash from "hash-sum";
import resolveFrom from "resolve-from";
var removeQuery = (p) => p.replace(/\?.+$/, "");
var genId = (filepath) => hash(path.relative(process.cwd(), filepath));
var compiler;
var getCompiler = async (cwd) => {
  if (compiler)
    return compiler;
  const id = resolveFrom(cwd, "@vue/compiler-sfc");
  compiler = await import(id);
  return compiler;
};
var src_default = () => {
  return {
    name: "vue",
    setup(build) {
      var _a, _b;
      const absPath = path.resolve(process.cwd(), build.initialOptions.absWorkingDir || "");
      const useSourceMap = !!build.initialOptions.sourcemap;
      build.initialOptions.define = build.initialOptions.define || {};
      Object.assign(build.initialOptions.define, {
        __VUE_OPTIONS_API__: ((_a = build.initialOptions.define) == null ? void 0 : _a.__VUE_OPTIONS_API__) ?? true,
        __VUE_PROD_DEVTOOLS__: ((_b = build.initialOptions.define) == null ? void 0 : _b.__VUE_PROD_DEVTOOLS__) ?? false
      });
      const formatPath = (p, resolveDir) => {
        if (p.startsWith(".")) {
          return path.resolve(resolveDir, p);
        }
        if (p.startsWith(absPath + "/")) {
          return p;
        }
        return path.join(absPath, p);
      };
      build.onResolve({ filter: /\.vue$/ }, (args) => {
        return {
          path: args.path,
          namespace: "vue",
          pluginData: { resolveDir: args.resolveDir }
        };
      });
      build.onResolve({ filter: /\?vue&type=template/ }, (args) => {
        return {
          path: args.path,
          namespace: "vue",
          pluginData: { resolveDir: args.resolveDir }
        };
      });
      build.onResolve({ filter: /\?vue&type=script/ }, (args) => {
        return {
          path: args.path,
          namespace: "vue",
          pluginData: { resolveDir: args.resolveDir }
        };
      });
      build.onResolve({ filter: /\?vue&type=style/ }, (args) => {
        return {
          path: args.path,
          namespace: "vue",
          pluginData: { resolveDir: args.resolveDir }
        };
      });
      build.onLoad({ filter: /\.vue$/, namespace: "vue" }, async (args) => {
        var _a2, _b2, _c;
        const compiler2 = await getCompiler(absPath);
        const { resolveDir } = args.pluginData;
        const filepath = formatPath(args.path, resolveDir);
        const content = await fs.promises.readFile(filepath, "utf8");
        const sfc = compiler2.parse(content);
        let contents = ``;
        const inlineTemplate = !!sfc.descriptor.scriptSetup && !((_a2 = sfc.descriptor.template) == null ? void 0 : _a2.src);
        const isTS = ((_b2 = sfc.descriptor.scriptSetup) == null ? void 0 : _b2.lang) === "ts" || ((_c = sfc.descriptor.script) == null ? void 0 : _c.lang) === "ts";
        const hasScoped = sfc.descriptor.styles.some((s) => s.scoped);
        if (sfc.descriptor.script || sfc.descriptor.scriptSetup) {
          const scriptResult = compiler2.compileScript(sfc.descriptor, {
            id: genId(args.path),
            inlineTemplate,
            sourceMap: useSourceMap
          });
          contents += compiler2.rewriteDefault(scriptResult.content, "__sfc_main");
        } else {
          contents += `let __sfc_main = {}`;
        }
        if (sfc.descriptor.styles.length > 0) {
          contents += `
          import "${args.path}?vue&type=style"
          `;
        }
        if (sfc.descriptor.template && !inlineTemplate) {
          contents += `
          import { render } from "${args.path}?vue&type=template"

          __sfc_main.render = render
          `;
        }
        if (hasScoped) {
          contents += `__sfc_main.__scopeId = "data-v-${genId(args.path)}"
`;
        }
        contents += `
export default __sfc_main`;
        return {
          contents,
          resolveDir,
          loader: isTS ? "ts" : "js",
          watchFiles: [filepath]
        };
      });
      build.onLoad({ filter: /\?vue&type=template/, namespace: "vue" }, async (args) => {
        var _a2, _b2;
        const compiler2 = await getCompiler(absPath);
        const { resolveDir } = args.pluginData;
        const relativePath = removeQuery(args.path);
        const filepath = formatPath(relativePath, resolveDir);
        const source = await fs.promises.readFile(filepath, "utf8");
        const { descriptor } = compiler2.parse(source);
        if (descriptor.template) {
          const hasScoped = descriptor.styles.some((s) => s.scoped);
          const id = genId(relativePath);
          const expressionPlugins = [];
          const lang = ((_a2 = descriptor.scriptSetup) == null ? void 0 : _a2.lang) || ((_b2 = descriptor.script) == null ? void 0 : _b2.lang);
          if (lang && /tsx?$/.test(lang) && !expressionPlugins.includes("typescript")) {
            expressionPlugins.push("typescript");
          }
          const compiled = compiler2.compileTemplate({
            source: descriptor.template.content,
            filename: filepath,
            id,
            scoped: hasScoped,
            isProd: process.env.NODE_ENV === "production",
            slotted: descriptor.slotted,
            preprocessLang: descriptor.template.lang,
            compilerOptions: {
              scopeId: hasScoped ? `data-v-${id}` : void 0,
              sourceMap: useSourceMap,
              expressionPlugins
            }
          });
          return {
            resolveDir,
            contents: compiled.code
          };
        }
      });
      build.onLoad({ filter: /\?vue&type=script/, namespace: "vue" }, async (args) => {
        const compiler2 = await getCompiler(absPath);
        const { resolveDir } = args.pluginData;
        const relativePath = removeQuery(args.path);
        const filepath = formatPath(relativePath, resolveDir);
        const source = await fs.promises.readFile(filepath, "utf8");
        const { descriptor } = compiler2.parse(source, { filename: filepath });
        if (descriptor.script) {
          const compiled = compiler2.compileScript(descriptor, {
            id: genId(relativePath)
          });
          return {
            resolveDir,
            contents: compiled.content,
            loader: compiled.lang === "ts" ? "ts" : "js"
          };
        }
      });
      build.onLoad({ filter: /\?vue&type=style/, namespace: "vue" }, async (args) => {
        const compiler2 = await getCompiler(absPath);
        const { resolveDir } = args.pluginData;
        const relativePath = removeQuery(args.path);
        const filepath = formatPath(relativePath, resolveDir);
        const source = await fs.promises.readFile(filepath, "utf8");
        const { descriptor } = compiler2.parse(source);
        if (descriptor.styles.length > 0) {
          const id = genId(relativePath);
          let content = "";
          for (const style of descriptor.styles) {
            const compiled = await compiler2.compileStyleAsync({
              source: style.content,
              filename: filepath,
              id,
              scoped: style.scoped,
              preprocessLang: style.lang,
              modules: !!style.module
            });
            if (compiled.errors.length > 0) {
              throw compiled.errors[0];
            }
            content += compiled.code;
          }
          return {
            resolveDir,
            contents: content,
            loader: "css"
          };
        }
      });
      build.onEnd((result) => {
        const collectCssFile = build.collectCssFile;
        if (result.metafile && collectCssFile) {
          for (const filename in result.metafile.outputs) {
            if (!filename.endsWith(".css"))
              continue;
            const inputs = Object.keys(result.metafile.outputs[filename].inputs);
            if (inputs.some((name) => name.includes("?vue&type=style"))) {
              collectCssFile(path.join(build.initialOptions.absWorkingDir || process.cwd(), filename));
            }
          }
        }
      });
    }
  };
};
export {
  src_default as default
};
